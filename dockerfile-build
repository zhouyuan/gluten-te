FROM ubuntu:20.04 AS gluten-base
MAINTAINER Hongze Zhang<hongze.zhang@intel.com>

SHELL ["/bin/bash", "-c"]

# REQUIRED PROXYS: APT, WGET, GIT, MAVEN (also Maven mirror)
ARG HTTP_PROXY_HOST
ARG HTTP_PROXY_PORT

ENV http_proxy=${HTTP_PROXY_HOST:+"http://$HTTP_PROXY_HOST:$HTTP_PROXY_PORT"}
ENV https_proxy=${HTTP_PROXY_HOST:+"http://$HTTP_PROXY_HOST:$HTTP_PROXY_PORT"}

RUN if [ -n "$HTTP_PROXY_HOST" ]; then echo "Acquire::http::Proxy \"http://$HTTP_PROXY_HOST:$HTTP_PROXY_PORT\";" >> /etc/apt/apt.conf; fi
RUN if [ -n "$HTTP_PROXY_HOST" ]; then echo "Acquire::https::Proxy \"http://$HTTP_PROXY_HOST:$HTTP_PROXY_PORT\";" >> /etc/apt/apt.conf; fi

ARG MAVEN_MIRROR_URL

RUN if [ -n "$MAVEN_MIRROR_URL" ]; \
    then \
      MAVEN_SETTINGS_TEMPLATE="<settings><mirrors><mirror><id>mavenmirror</id><mirrorOf>central</mirrorOf><name>MavenMirror</name><url>{{MAVEN_MIRROR_URL}}</url></mirror></mirrors><proxies><proxy><id>httpproxy</id><active>{{MAVEN_PROXY_ENABLE}}</active><protocol>http</protocol><host>{{MAVEN_PROXY_HOST}}</host><port>{{MAVEN_PROXY_PORT}}</port></proxy><proxy><id>httpsproxy</id><active>{{MAVEN_PROXY_ENABLE}}</active><protocol>https</protocol><host>{{MAVEN_PROXY_HOST}}</host><port>{{MAVEN_PROXY_PORT}}</port></proxy></proxies></settings>"; \
      MAVEN_SETTINGS_TEMPLATE=$(echo $MAVEN_SETTINGS_TEMPLATE | sed "s@{{MAVEN_MIRROR_URL}}@$MAVEN_MIRROR_URL@g"); \
    else \
      MAVEN_SETTINGS_TEMPLATE="<settings><proxies><proxy><id>httpproxy</id><active>{{MAVEN_PROXY_ENABLE}}</active><protocol>http</protocol><host>{{MAVEN_PROXY_HOST}}</host><port>{{MAVEN_PROXY_PORT}}</port></proxy><proxy><id>httpsproxy</id><active>{{MAVEN_PROXY_ENABLE}}</active><protocol>https</protocol><host>{{MAVEN_PROXY_HOST}}</host><port>{{MAVEN_PROXY_PORT}}</port></proxy></proxies></settings>"; \
    fi \
    && if [ -n "$HTTP_PROXY_HOST" ]; \
    then \
      MAVEN_SETTINGS_TEMPLATE=$(echo $MAVEN_SETTINGS_TEMPLATE | sed "s/{{MAVEN_PROXY_ENABLE}}/true/g"); \
      MAVEN_SETTINGS_TEMPLATE=$(echo $MAVEN_SETTINGS_TEMPLATE | sed "s/{{MAVEN_PROXY_HOST}}/$HTTP_PROXY_HOST/g"); \
      MAVEN_SETTINGS_TEMPLATE=$(echo $MAVEN_SETTINGS_TEMPLATE | sed "s/{{MAVEN_PROXY_PORT}}/$HTTP_PROXY_PORT/g"); \
    else \
      MAVEN_SETTINGS_TEMPLATE=$(echo $MAVEN_SETTINGS_TEMPLATE | sed "s/{{MAVEN_PROXY_ENABLE}}/false/g"); \
      MAVEN_SETTINGS_TEMPLATE=$(echo $MAVEN_SETTINGS_TEMPLATE | sed "s/{{MAVEN_PROXY_HOST}}/localhost/g"); \
      MAVEN_SETTINGS_TEMPLATE=$(echo $MAVEN_SETTINGS_TEMPLATE | sed "s/{{MAVEN_PROXY_PORT}}/8888/g"); \
    fi \
    && MAVEN_SETTINGS=$MAVEN_SETTINGS_TEMPLATE \
    && mkdir -p /root/.m2/ \
    && echo $MAVEN_SETTINGS > /root/.m2/settings.xml

# Display environment information
RUN ulimit -a
RUN env
RUN cat /etc/apt/apt.conf || echo "Apt proxy not set"
RUN cat /root/.m2/settings.xml

# Whether debug build is enabled
ARG JDK_DEBUG_BUILD
ARG VELOX_DEBUG_BUILD
ARG ARROW_DEBUG_BUILD
ARG GLUTEN_DEBUG_BUILD
RUN if [ -n "$JDK_DEBUG_BUILD" ]; then echo "JDK debug build is enabled!"; fi
RUN if [ -n "$VELOX_DEBUG_BUILD" ]; then echo "Velox debug build is enabled!"; fi
RUN if [ -n "$ARROW_DEBUG_BUILD" ]; then echo "Arrow debug build is enabled!"; fi
RUN if [ -n "$GLUTEN_DEBUG_BUILD" ]; then echo "Gluten debug build is enabled!"; fi

## APT dependencies

# Update
RUN apt-get update

# Essentials
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y sudo wget tar tzdata git ccache cmake ninja-build build-essential llvm-11-dev clang-11 libiberty-dev libdwarf-dev libre2-dev libz-dev libssl-dev libboost-all-dev libcurl4-openssl-dev

# Install OpenJDK 8 and Maven
RUN if [ -n "$JDK_DEBUG_BUILD" ]; \
    then \
      mkdir -p /opt/jdk/ \
      && mkdir -p /opt/maven/ \
      && cd /opt/jdk/ \
      && wget https://builds.shipilev.net/openjdk-jdk8/openjdk-jdk8-linux-x86_64-server-fastdebug-gcc8-glibc2.28.tar.xz \
      && tar -xvf openjdk-jdk8-linux-x86_64-server-fastdebug-gcc8-glibc2.28.tar.xz \
      && rm -f openjdk-jdk8-linux-x86_64-server-fastdebug-gcc8-glibc2.28.tar.xz \
      && cd /opt/maven/ \
      && wget https://dlcdn.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz \
      && tar -xvf apache-maven-3.6.3-bin.tar.gz \
      && rm -f apache-maven-3.6.3-bin.tar.gz \
      && cp -rs /opt/jdk/j2sdk-image/bin/* /usr/local/bin/ \
      && cp -rs /opt/maven/apache-maven-3.6.3/bin/mvn /usr/local/bin/; \
    else \
      DEBIAN_FRONTEND=noninteractive apt-get install -y openjdk-8-jdk; \
      DEBIAN_FRONTEND=noninteractive apt-get install -y maven; \
    fi

ENV JAVA_HOME=${JDK_DEBUG_BUILD:+"/opt/jdk/j2sdk-image"}

ARG TIMEZONE
RUN test -n "$TIMEZONE" || (echo "TIMEZONE not set" && false)

RUN TZ=$TIMEZONE \
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \
    && echo $TZ > /etc/timezone \
    && dpkg-reconfigure -f noninteractive tzdata

# Prepare Gluten Maven build options
ENV GLUTEN_MAVEN_OPTIONS="-Pbackends-velox \
                          -Dbuild_protobuf=OFF \
                          -Dvelox_build_type=$(if [ -n \"\$VELOX_DEBUG_BUILD\" ]; then echo \"debug\"; else echo \"release\"; fi) \
                          -Ddebug_build=$(if [ -n \"\$GLUTEN_DEBUG_BUILD\" ]; then echo \"ON\"; else echo \"OFF\"; fi) \
                          -Dbuild_cpp=ON \
                          -Dbuild_arrow=ON \
                          -Dbuild_velox=ON \
                          -Dbuild_velox_from_source=ON \
                          -Dbuild_gazelle_cpp=OFF \
                          -DskipTests \
                          -Dscalastyle.skip=true \
                          -Dcheckstyle.skip=true"            

# These branches are mainly for pre-downloading dependencies to speed-up builds. 
# Thus it should not be required to change these values every time when the build branch
# is changed.
ARG CACHE_GLUTEN_REPO
ARG CACHE_GLUTEN_BRANCH

RUN test -n "$CACHE_GLUTEN_REPO" || (echo "CACHE_GLUTEN_REPO not set" && false)
RUN test -n "$CACHE_GLUTEN_BRANCH" || (echo "CACHE_GLUTEN_BRANCH not set" && false)

RUN cd /opt/ \
    && git clone $CACHE_GLUTEN_REPO -b $CACHE_GLUTEN_BRANCH gluten

# Set ccache size
RUN ccache -M 128G
RUN ccache -s

# Prebuild Gluten
RUN cd /opt/gluten \
    &&  bash -c "mvn clean install $GLUTEN_MAVEN_OPTIONS"

# Build Gluten
ARG TARGET_GLUTEN_REPO
ARG TARGET_GLUTEN_COMMIT

RUN test -n "$TARGET_GLUTEN_REPO" || (echo "TARGET_GLUTEN_REPO not set" && false)
RUN test -n "$TARGET_GLUTEN_COMMIT" || (echo "TARGET_GLUTEN_COMMIT not set" && false)

RUN cd /opt/gluten \
    && git fetch $TARGET_GLUTEN_REPO $TARGET_GLUTEN_COMMIT:build_$TARGET_GLUTEN_COMMIT \
    && git checkout build_$TARGET_GLUTEN_COMMIT

RUN cd /opt/gluten \
    &&  bash -c "mvn clean install $GLUTEN_MAVEN_OPTIONS"

# EOF
